<?xml version='1.0' encoding='utf-8'?>
<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2">
  <ext:UBLExtensions><ext:UBLExtension>
                    <ext:ExtensionURI>urn:oasis:names:specification:ubl:dsig:enveloped:xades</ext:ExtensionURI>
                    <ext:ExtensionContent>
                        <sig:UBLDocumentSignatures xmlns:sig="urn:oasis:names:specification:ubl:schema:xsd:CommonSignatureComponents-2" xmlns:sac="urn:oasis:names:specification:ubl:schema:xsd:SignatureAggregateComponents-2" xmlns:sbc="urn:oasis:names:specification:ubl:schema:xsd:SignatureBasicComponents-2">

                            <sac:SignatureInformation>
                                <cbc:ID>urn:oasis:names:specification:ubl:signature:1</cbc:ID>
                                <sbc:ReferencedSignatureID>urn:oasis:names:specification:ubl:signature:Invoice</sbc:ReferencedSignatureID>
                                <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#" Id="signature">
                                    <ds:SignedInfo>
                                        <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2006/12/xml-c14n11"/>
                                        <ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256"/>
                                        <ds:Reference Id="invoiceSignedData" URI="">
                                            <ds:Transforms>
                                                <ds:Transform Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116">
                                                    <ds:XPath>not(//ancestor-or-self::ext:UBLExtensions)</ds:XPath>
                                                </ds:Transform>
                                                <ds:Transform Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116">
                                                    <ds:XPath>not(//ancestor-or-self::cac:Signature)</ds:XPath>
                                                </ds:Transform>
                                                <ds:Transform Algorithm="http://www.w3.org/TR/1999/REC-xpath-19991116">
                                                    <ds:XPath>not(//ancestor-or-self::cac:AdditionalDocumentReference[cbc:ID='QR'])</ds:XPath>
                                                </ds:Transform>
                                                <ds:Transform Algorithm="http://www.w3.org/2006/12/xml-c14n11"/>
                                            </ds:Transforms>
                                            <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
                                            <ds:DigestValue>yy5ioUKJZvcb4GKW1iUyxiaTAOAm8W+BctVN3IytiHY=</ds:DigestValue>
                                        </ds:Reference>
                                        <ds:Reference Type="http://www.w3.org/2000/09/xmldsig#SignatureProperties" URI="#xadesSignedProperties">
                                            <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
                                            <ds:DigestValue>ZDJjNDkzZDMxMTU0MTFmNjM3NmU5OTA0YzMyMjYyYzlmMzdkNmI4ODNhMDQ1MjY5N2M4MWRhZWNjY2FiM2VkMg==</ds:DigestValue>
                                        </ds:Reference>
                                    </ds:SignedInfo>

                                    <ds:SignatureValue>MEYCIQD69bmYcHQwKIbRA6b1IIwpyJXkRQ/g2n0jusRmmCFEnwIhALM1R4LlMRnww2PbShovmG1cIrFK9JqBm9nyoUMN/rMB</ds:SignatureValue>
                                    <ds:KeyInfo>
                                        <ds:X509Data>
                                            <ds:X509Certificate>MIICNDCCAdugAwIBAgIGAZjHPdunMAoGCCqGSM49BAMCMBUxEzARBgNVBAMMCmVJbnZvaWNpbmcwHhcNMjUwODIwMTEyOTMxWhcNMzAwODE5MjEwMDAwWjBpMQswCQYDVQQGEwJTQTESMBAGA1UECgwJdGVzdCByZXN0MRMwEQYDVQQLDAoxMjM0NTY3ODk4MTEwLwYDVQQDDChUU1QtMzJhOTlmODItNjkwNS00NTRhLTlhMzAtYzljMmFiZDk4NzI3MFYwEAYHKoZIzj0CAQYFK4EEAAoDQgAEGQ6Zld9fMPlf1DAsaOMbPr2ZpkCdRsVdColSoBOSRNW75WE1+4W/CA8LlOYNRIJVxdk7CICjzkqNfTOUzro2/6OBxTCBwjAMBgNVHRMBAf8EAjAAMIGxBgNVHREEgakwgaakgaMwgaAxQjBABgNVBAQMOTEtTWljcm9QT1N8Mi0xLjAuMHwzLTMyYTk5ZjgyLTY5MDUtNDU0YS05YTMwLWM5YzJhYmQ5ODcyNzEfMB0GCgmSJomT8ixkAQEMDzMwMTAxMjQxNDUxMDEyMzENMAsGA1UEDAwEMTAwMDEVMBMGA1UEGgwMdGVzdCBhZGRyZXNzMRMwEQYDVQQPDApSZXN0YXVyYW50MAoGCCqGSM49BAMCA0cAMEQCICyGJFarmquEhEoCm29tjvwXHxaM3p0SAqNTqj1EXAAKAiB4WS1rASv1KPr+KHNtPwiM32Ca4twEKahGVUW4aV6lUg==</ds:X509Certificate>
                                        </ds:X509Data>
                                    </ds:KeyInfo>

                                    <ds:Object>
                                        <xades:QualifyingProperties xmlns:xades="http://uri.etsi.org/01903/v1.3.2#" Target="signature">
                                            <xades:SignedProperties Id="xadesSignedProperties">
                                                <xades:SignedSignatureProperties>
                                                    <xades:SigningTime>2025-08-20T16:25:33</xades:SigningTime>
                                                    <xades:SigningCertificate>
                                                        <xades:Cert>
                                                            <xades:CertDigest>
                                                                <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
                                                                <ds:DigestValue>6LoP1YGPc52dj+n+P1ja6e7QDsKWUkFVkDZ9miO52yw=</ds:DigestValue>
                                                            </xades:CertDigest>
                                                            <xades:IssuerSerial>
                                                                <ds:X509IssuerName>CN=eInvoicing</ds:X509IssuerName>
                                                                <ds:X509SerialNumber>1755689376679</ds:X509SerialNumber>
                                                            </xades:IssuerSerial>
                                                        </xades:Cert>
                                                    </xades:SigningCertificate>
                                                </xades:SignedSignatureProperties>
                                            </xades:SignedProperties>
                                        </xades:QualifyingProperties>
                                    </ds:Object>
                                </ds:Signature>
                            </sac:SignatureInformation>
                        </sig:UBLDocumentSignatures>
                    </ext:ExtensionContent>
                </ext:UBLExtension>
            </ext:UBLExtensions>
  <cbc:ProfileID>reporting:1.0</cbc:ProfileID>
  <cbc:ID>SME00023</cbc:ID>
  <cbc:UUID>deccce64-1faf-47f4-970f-b35d56224f63</cbc:UUID>
  <cbc:IssueDate>2025-08-20</cbc:IssueDate>
  <cbc:IssueTime>16:25:33</cbc:IssueTime>
  <cbc:InvoiceTypeCode name="020000000">388</cbc:InvoiceTypeCode>
  <cbc:DocumentCurrencyCode>SAR</cbc:DocumentCurrencyCode>
  <cbc:TaxCurrencyCode>SAR</cbc:TaxCurrencyCode>
  <cac:AdditionalDocumentReference>
    <cbc:ID>ICV</cbc:ID>
    <cbc:UUID>1</cbc:UUID>
  </cac:AdditionalDocumentReference>
  <cac:AdditionalDocumentReference>
    <cbc:ID>PIH</cbc:ID>
    <cac:Attachment>
      <cbc:EmbeddedDocumentBinaryObject mimeCode="text/plain">NWZlY2ViNjZmZmM4NmYzOGQ5NTI3ODZjNmQ2OTZjNzljMmRiYzIzOWRkNGU5MWI0NjcyOWQ3M2EyN7ZiNTdlOQ==</cbc:EmbeddedDocumentBinaryObject>
    </cac:Attachment>
  </cac:AdditionalDocumentReference>
  <cac:AdditionalDocumentReference>
    <cbc:ID>QR</cbc:ID>
    <cac:Attachment>
      <cbc:EmbeddedDocumentBinaryObject mimeCode="text/plain">AQhNeSBTdG9yZQIPMzEwMDAwMDAwMDAwMDkzAxMyMDI1LTA4LTIwVDE2OjI1OjMzBAYyODcuNTAFBTM3LjUwBix5eTVpb1VLSlp2Y2I0R0tXMWlVeXhpYVRBT0FtOFcrQmN0Vk4zSXl0aUhZPQdgTUVZQ0lRRDY5Ym1ZY0hRd0tJYlJBNmIxSUl3cHlKWGtSUS9nMm4wanVzUm1tQ0ZFbndJaEFMTTFSNExsTVJud3cyUGJTaG92bUcxY0lyRks5SnFCbTlueW9VTU4vck1CCFgwVjAQBgcqhkjOPQIBBgUrgQQACgNCAAQZDpmV318w+V/UMCxo4xs+vZmmQJ1GxV0KiVKgE5JE1bvlYTX7hb8IDwuU5g1EglXF2TsIgKPOSo19M5TOujb/CUYwRAIgLIYkVquaq4SESgKbb22O/BcfFozenRICo1OqPURcAAoCIHhZLWsBK/Uo+v4oc20/CIzfYJri3AQpqEZVRbhpXqVS</cbc:EmbeddedDocumentBinaryObject>
    </cac:Attachment>
  </cac:AdditionalDocumentReference>
  <cac:Signature>
    <cbc:ID>urn:oasis:names:specification:ubl:signature:Invoice</cbc:ID>
    <cbc:SignatureMethod>urn:oasis:names:specification:ubl:dsig:enveloped:xades</cbc:SignatureMethod>
  </cac:Signature>
  <cac:AccountingSupplierParty>
    <cac:Party>
      <cac:PartyIdentification>
        <cbc:ID schemeID="CRN">1010010000</cbc:ID>
      </cac:PartyIdentification>
      <cac:PostalAddress>
        <cbc:StreetName>Main Street</cbc:StreetName>
        <cbc:BuildingNumber>0123</cbc:BuildingNumber>
        <cbc:CityName>Riyadh</cbc:CityName>
        <cbc:PostalZone>12345</cbc:PostalZone>
        <cac:Country>
          <cbc:IdentificationCode>SA</cbc:IdentificationCode>
        </cac:Country>
      </cac:PostalAddress>
      <cac:PartyTaxScheme>
        <cbc:CompanyID>310000000000093</cbc:CompanyID>
        <cac:TaxScheme>
          <cbc:ID>VAT</cbc:ID>
        </cac:TaxScheme>
      </cac:PartyTaxScheme>
      <cac:PartyLegalEntity>
        <cbc:RegistrationName>My Store</cbc:RegistrationName>
      </cac:PartyLegalEntity>
    </cac:Party>
  </cac:AccountingSupplierParty>
  <cac:AccountingCustomerParty>
    <cac:Party>
      <cac:PartyIdentification>
        <cbc:ID schemeID="NAT">SA</cbc:ID>
      </cac:PartyIdentification>
    </cac:Party>
  </cac:AccountingCustomerParty>
  <cac:TaxTotal>
    <cbc:TaxAmount currencyID="SAR">37.50</cbc:TaxAmount>
    <cac:TaxSubtotal>
      <cbc:TaxableAmount currencyID="SAR">250.00</cbc:TaxableAmount>
      <cbc:TaxAmount currencyID="SAR">37.50</cbc:TaxAmount>
      <cac:TaxCategory>
        <cbc:ID>S</cbc:ID>
        <cbc:Percent>15</cbc:Percent>
        <cac:TaxScheme>
          <cbc:ID>VAT</cbc:ID>
        </cac:TaxScheme>
      </cac:TaxCategory>
    </cac:TaxSubtotal>
  </cac:TaxTotal>
  <cac:LegalMonetaryTotal>
    <cbc:TaxExclusiveAmount currencyID="SAR">250.00</cbc:TaxExclusiveAmount>
    <cbc:TaxInclusiveAmount currencyID="SAR">287.50</cbc:TaxInclusiveAmount>
    <cbc:PayableAmount currencyID="SAR">287.50</cbc:PayableAmount>
  </cac:LegalMonetaryTotal>
  <cac:InvoiceLine>
    <cbc:ID>1</cbc:ID>
    <cbc:InvoicedQuantity unitCode="PCE">2</cbc:InvoicedQuantity>
    <cbc:LineExtensionAmount currencyID="SAR">200.00</cbc:LineExtensionAmount>
    <cac:TaxTotal>
      <cbc:TaxAmount currencyID="SAR">30.00</cbc:TaxAmount>
    </cac:TaxTotal>
    <cac:Item>
      <cbc:Name>Product 1</cbc:Name>
      <cac:ClassifiedTaxCategory>
        <cbc:ID>S</cbc:ID>
        <cbc:Percent>15</cbc:Percent>
        <cac:TaxScheme>
          <cbc:ID>VAT</cbc:ID>
        </cac:TaxScheme>
      </cac:ClassifiedTaxCategory>
    </cac:Item>
    <cac:Price>
      <cbc:PriceAmount currencyID="SAR">100.00</cbc:PriceAmount>
    </cac:Price>
  </cac:InvoiceLine>
  <cac:InvoiceLine>
    <cbc:ID>2</cbc:ID>
    <cbc:InvoicedQuantity unitCode="PCE">1</cbc:InvoicedQuantity>
    <cbc:LineExtensionAmount currencyID="SAR">50.00</cbc:LineExtensionAmount>
    <cac:TaxTotal>
      <cbc:TaxAmount currencyID="SAR">7.50</cbc:TaxAmount>
    </cac:TaxTotal>
    <cac:Item>
      <cbc:Name>Product 2</cbc:Name>
      <cac:ClassifiedTaxCategory>
        <cbc:ID>S</cbc:ID>
        <cbc:Percent>15</cbc:Percent>
        <cac:TaxScheme>
          <cbc:ID>VAT</cbc:ID>
        </cac:TaxScheme>
      </cac:ClassifiedTaxCategory>
    </cac:Item>
    <cac:Price>
      <cbc:PriceAmount currencyID="SAR">50.00</cbc:PriceAmount>
    </cac:Price>
  </cac:InvoiceLine>
DQo8L0ludm9pY2U+